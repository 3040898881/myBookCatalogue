
※为什么选择SSM框架+Redis的开发模式※4
※本书特点※5
※本书的内容安排※5
※和读者的约定※6
※本书目标读者※6
※致谢※7
※读者服务※7
	http://blog.csdn.net/ykzhen2015
	www.broadview.com.cn
※目录※8
※第1章 认识SSM框架和Redis※20页
	☆1.1 Spring框架☆20
		★1.1.1 Spring IOC简介★20
		★1.1.2 Spring AOP★22
	☆1.2 MyBatis简介☆24
		★1.2.1 Hibernate简介★25
		★1.2.2 MyBatis★27
		★1.2.3 Hibernate和MyBatis的区别★27
※第2章 Java设计模式※33页
	☆2.1 Java反射技术☆33
		★2.1.1 通过反射构建对象★34
		★2.1.2 反射方法★36
		★2.1.3 实例★36
	☆2.2 动态代理模式和责任链模式☆37
		★2.2.1 JDK动态代理★38
		★2.2.2 CGLIB动态代理★40
		★2.2.3 拦截器★42
		★2.2.4 责任链模式★46
	☆2.3 观察者（Observer）模式☆48
		★2.3.1 概述★49
		★2.3.2 实例★51
	☆2.4 工厂模式和抽象工厂模式☆53
		★2.4.1 普通工厂（Simple Factory）模式★53
		★2.4.2 抽象工厂（Abstract Factory）模式★54
	☆2.5 建造者（Builder）模式☆56
		★2.5.1 概述★56
		★2.5.2 Builder模式实例★57
	☆2.6 总结☆59
※第3章 认识MyBatis核心组件※61页
	☆3.1 持久层的概念和MyBatis的特点☆61
	☆3.2 准备MyBatis环境☆62
	☆3.3 MyBatis的核心组件☆64
	☆3.4 SqlSessionFactory（工厂接口）☆64
		★3.4.1 使用XML构建SqlSessionFactory★65
		★3.4.2 使用代码构建SqlSessionFactory★67
	☆3.5 SqlSession☆68
	☆3.6 映射器☆69
		★3.6.1 用XML实现映射器★69
		★3.6.2 注解实现映射器★70
		★3.6.3 SqlSession发送SQL★71
		★3.6.4 用Mapper接口发送SQL★72
	☆3.7 生命周期☆73
		★3.7.1 SqlSessionFactoryBuilder★73
		★3.7.2 SqlSessionFactory★73
		★3.7.3 SqlSession★73
		★3.7.4 Mapper★73
	☆3.8 实例☆74
		
※第4章 MyBatis配置※80页，看到102页
	☆4.1 概述☆80
	☆4.2 properties属性☆81
		★4.2.1 property子元素★81
		★4.2.2 使用properties文件★82
		★4.2.3 使用程序传递方式传递参数★83
		★4.2.4 总结★83
	☆4.3 settings设置☆84
		§表4-1 settings配置项说明§84
	☆4.4 typeAliases别名☆86
		★4.4.1 系统定义别名★86
			§表4-2 系统自定义别名§86
		★4.4.2 自定义别名★89
	☆4.5 typeHandler类型转换器☆90
		★4.5.1 系统定义的typeHandler★90
			§表4-3 系统定义的typeHandler§90
		★4.5.2 自定义的typeHandler★95
		★4.5.3 枚举typeHandler★98
			◇4.5.3.1 EnumOrdinalTypeHandler◇99
			◇4.5.3.2 EnumTypeHandler◇101
			◇4.5.3.3 自定义枚举typeHandler◇102
		★4.5.4 文件操作★103
	☆4.6 ObjectFactory（对象工厂）☆104
	☆4.7 插件☆106
	☆4.8 environments（运行环境）☆106
		★4.8.1 transactionManager（事务管理器）★107
		★4.8.2 environment（数据源环境）★109
			◇1. UNPOOLED◇110
			◇2. POOLED◇110
			◇3. JNDI◇110
	☆4.9 environments（运行环境）☆112
		★4.9.1 使用系统默认的databaseIdProvider★112
		★4.9.2 不使用系统规则★115
	☆4.10 引入映射器的方法☆116
		◇1. 用文件路径引入映射器◇117
		◇2. 用包名引入映射器◇117
		◇3. 用类注册引入映射器◇117
		◇4. 用UserMapper.xml引入映射器◇117
※第5章 映射器※119
	☆5.1 概述☆120
		§表5-1 映射器的配置元素§120
	☆5.2 select元素——查询语句☆120
		§表5-2 select元素的配置§120
		★5.2.1 简单的select元素的应用★121
		★5.2.2 自动映射和驼峰映射★122
		★5.2.3 传递多个参数★123
			◇5.2.3.1 使用map接口传递参数◇123
			◇5.2.3.2 使用注解传递多个参数◇124
			◇5.2.3.3 通过Java Bean传递多个参数◇125
			◇5.2.3.4 混合使用◇125
			◇5.2.3.5 总结◇126
		★5.2.4 使用resultMap映射结果集★127
		★5.2.5 分页参数RowBounds★127
	☆5.3 insert元素——插入语句☆129
		★5.3.1 概述★129
			§表5-3 insert语句的配置§129
		★5.3.2 简单的insert语句的应用★130
		★5.3.3 主键回填★130
		★5.3.4 自定义主键★131
	☆5.4 update元素和delete元素☆132	
	☆5.5 sql元素☆132	
	☆5.6 参数☆133	
		★5.6.1 概述★133
		★5.6.2 存储过程参数支持★134
		★5.6.3 特殊字符串的替换和处理（#和$）★134
	☆5.7 resultMap元素☆135		
		★5.7.1 resultMap元素的构成★135
			§表5-4 result元素和idArg元素的属性§136
		★5.7.2 使用map存储结果集★136
		★5.7.3 使用POJO存储结果集★137
	☆5.8 级联☆137
		★5.8.1 MyBatis中的级联★138
		★5.8.2 建立POJO★141
		★5.8.3 配置映射文件★144
		★5.8.4 N+1问题★150
		★5.8.5 延迟加载★150
			§表5-5 延迟加载的配置项§150
		★5.8.6 另一种级联★154
		★5.8.7 多对多级联★157
	☆5.9 缓存☆161
		★5.9.1 一级缓存和二级缓存★161
		★5.9.2 缓存配置项、自定义和引用★164
			§表5-6 cache元素的配置项§165
	☆5.10 存储过程☆166
		★5.10.1 IN和OUT参数存储过程★167
		★5.10.2 游标的使用★169
※第6章 动态SQL※172
	☆6.1 概述☆172	
		§表6-1 动态SQL元素§172
	☆6.2 if元素☆173	
	☆6.3 choose、when、otherwise☆173	
	☆6.4 trim、where、set☆174
	☆6.5 foreach☆176
	☆6.6 用test属性判断字符串☆176
	☆6.7 bind元素☆177
※第7章 MyBatis的解析和运行原理※179，看到192	
	☆7.1 构建SqlSessionFactory过程☆180
		★7.1.1 构建Configuration★182
		★7.1.2 构建映射器的内部组成★183
		★7.1.3 构建SqlSessionFactory★184
	☆7.2 SqlSession运行过程☆185
		★7.2.1 映射器（Mapper）的动态代理★185
		★7.2.2 SqlSession下的四大对象★190
			◇7.2.2.1 Executor——执行器◇190
			◇7.2.2.2 StatementHandler——数据库会话器◇192
			◇7.2.2.3 ParameterHandler——参数处理器◇194
			◇7.2.2.4 ResultSetHandler——结果处理器◇196
		★7.2.3 SqlSession运行总结★197
※第8章 插件※198，看到204
	☆8.1 插件接口Interceptor☆198
	☆8.2 插件的初始化☆199
	☆8.3 插件的代理和反射设计☆200
	☆8.4 常用的工具类——MetaObject☆203
	☆8.5 插件开发过程和实例☆204
		★8.5.1 确定需要拦截的签名★204
		★8.5.2 实现拦截方法★206
		★8.5.3 配置和运行★208
		★8.5.4 插件实例——分页插件★209
	☆8.6 总结☆222
※第9章 Spring IOC概念※224
	☆9.1 spring概述☆224
	☆9.2 Spring IOC概述☆226
		★9.2.1 主动创建对象★227
		★9.2.2 被动创建对象★229
		★9.2.2 Spring IOC阐述★230
	☆9.3 Spring IOC容器☆231
		★9.3.1 Spring IOC容器的设计★232
		★9.3.2 Spring IOC容器的初始化和依赖注入★234
		★9.3.3 Spring Bean的生命周期★235
			§图9-5 Bean的生命周期§235　
		☆9.4 小结☆239
※第10章 装配Spring Bean※240，看到277
	☆10.1 依赖注入的3种方式☆240
		★10.1.1 构造器注入★241
		★10.1.2 使用Setter注入★241
		★10.1.3 接口注入★242
	☆10.2 装配Bean概述☆243
	☆10.3 通过XML装配Bean☆244
		★10.3.1 装配简易值★244
		★10.3.2 装配集合★245
		★10.3.3 命名空间装配★250
	☆10.4 通过注解装配Bean☆251
		★10.4.1 使用@Component装配Bean★252
		★10.4.2 自动装配——@Autowired★256
		★10.4.3 自动装配的歧义性（@Primary和@Qualifier）★257
		★10.4.4 装载带有参数的构造方法类★260
		★10.4.5 使用@Bean装配Bean★261
		★10.4.6 注解自定义Bean的初始化和销毁方法★262
	☆10.5 装配的混合使用☆262	
	☆10.6 使用Profile☆265	
		★10.6.1 使用注解@Profile配置★265
		★10.6.2 使用XML定义Profile★267
		★10.6.3 启动Profile★268
	☆10.7 加载属性（properties）文件☆270	
		★10.7.1 使用注解加载属性文件★270
		★10.7.2 使用XML方式加载属性文件★273
	☆10.8 条件化装配Bean☆274
	☆10.9 Bean的作用域☆275
	☆10.10 使用Spring表达式（Spring EL）☆
		★10.10.1 Spring EL相关的类★
		★10.10.2 Bean的属性和方法★280
		★10.10.3 使用类的静态常量和方法★281
		★10.10.4 Spring EL运算★281
※第11章 面向切面编程※283，看到300
	☆11.1 一个简单的约定游戏☆283
		★11.1.1 约定规则★283
		★11.1.2 读者的代码★285
		★11.1.3 笔者的代码★287
	☆11.2 Spring AOP的基本概念☆290	
		★11.2.1 AOP的概念和使用原因★290
		★11.2.2 面向切面编程的术语★294
		★11.2.3 Spring对AOP的支持★296
	☆11.3 使用@AspectJ注解开发Spring AOP☆297	
		★11.3.1 选择切点★297
		★11.3.2 创建切面★297
			§表11-1 Spring中AspectJ注解§298
		★11.3.3 连接点★299
			§表11-2 AspectJ的指示器§299
		★11.3.4 测试AOP★301
		★11.3.5 环绕通知★303
		★11.3.6 织入★305
		★11.3.7 给通知传递参数★305
		★11.3.8 引入★306
	☆11.4 使用XML配置开发Spring AOP☆309		
		★11.4.1 前置通知、后置通知、返回通知和异常通知★310
		★11.4.2 环绕通知★312
		★11.4.3 给通知传递参数★313
		★11.4.4 引入★314
	☆11.5 经典的Spring AOP应用程序☆315			
	☆11.6 多个切面☆317			
	☆11.7 小结☆322			
※第12章 Spring和数据库编程※323
	☆12.1 传统的JDBC代码的弊端☆324		
	☆12.2 配置数据库资源☆325		
		★12.2.1 使用简单数据库配置★326
		★12.2.2 使用第三方数据库连接池★326
		★12.2.3 使用JNDI数据库连接池★326
	☆12.3 JDBC代码失控的解决方案——jdbcTemplate☆327	
		★12.3.1 jdbcTemplate的增、删、查、改★328
		★12.3.2 执行多条SQL★330
		★12.3.3 jdbcTemplate的源码分析★331
	☆12.4 MyBatis-Spring项目☆333	
		★12.4.1 配置SqlSessionFactoryBean★334
		★12.4.2 SqlSessionTemplate组件★338
		★12.4.3 配置MapperFactoryBean★340
		★12.4.4 配置MapperScannerConfigurer★341
		★12.4.5 测试Spring+MyBatis★343
※第13章 深入Spring数据库事务管理※346		
	☆13.1 Spring数据库事务管理器的设计☆347	
		★13.1.1 配置事务管理器★349
		★13.1.2 用Java配置方式实现Spring数据库事务★350
	☆13.2 编程式事务☆352	
	☆13.3 声明式事务☆353
		★13.3.1 Transactional配置项★353
		§表13-1 Transactional配置项§354
		★13.3.2 使用XML进行配置事务管理器★355
		★13.3.3 事务定义器★357
		★13.3.4 声明式事务的约定流程★358
	☆13.4 数据库的相关知识☆359	
		★13.4.1 数据库事务ACID特性★359
		★13.4.2 丢失更新★359
		★13.4.3 隔离级别★361
	☆13.5 选择隔离级别和传播行为☆363
		★13.5.1 选择隔离级别★363
		★13.5.2 传播行为★364
	☆13.6 在Spring和MyBatis组合中使用事务☆366
	☆13.8 典型错误用法的剖析☆379
		★13.8.1 错误使用Service★379
		★13.8.2 过长时间占用事务★380
		★13.8.3 错误捕捉异常★382
※第14章 Spring MVC的初始化和流程※386	
	☆14.1 MVC设计概述☆386
		★14.1.1 Spring MVC的架构★388
		★14.1.2 Spring MVC组件与流程★388
		★14.1.3 Spring MVC入门的实例★390
	☆14.2 Spring MVC初始化☆394
		★14.2.1 初始化Spring IOC上下文★395
		★14.2.2 初始化映射请求上下文★396
		★14.2.3 使用注解配置方式初始化★402
	☆14.3 Spring MVC开发流程详解☆406
		★14.3.1 配置@RequestMapping★406
		★14.3.2 控制器的开发★407
			△14.3.2.1 获取请求参数△407
			△14.3.2.2 实现逻辑和绑定视图△409
		★14.3.3 视图渲染★412
	☆14.4 小结☆414
※第15章 深入Spring MVC组件开发※415	
	☆15.1 控制器接收各类请求参数☆415
		★15.1.1 接收普通请求参数★417
		★15.1.2 使用@RequestParam注解获取参数★418
		★15.1.3 使用URL传递参数★419
		★15.1.4 传递JSON参数★420
		★15.1.5 接收列表数据和表单序列化★422
	☆15.2 重定向☆425
	☆15.3 保存并获取属性参数☆428
		★15.3.1 @RequestAttribute★428
		★15.3.2 注解@SessionAttribute和注解@SessionAttributes★430
		★15.3.3 注解@CookieValue和注解@RequestHeader★433
	☆15.4 拦截器☆434
		★15.4.1 拦截器的定义★434
		★15.4.2 拦截器的执行流程★435
		★15.4.3 开发拦截器★435
		★15.4.4 多个拦截器执行的顺序★437
	☆15.5 验证表单☆440
		★15.5.1 使用JSR 303注解验证输入内容★441
		★15.5.2 使用验证器★446
	☆15.6 数据模型☆448
	☆15.7 视图和视图解析器☆450
※第16章 Spring MVC高级应用※465，看到476
	☆16.1 Spring MVC的数据转换和格式化☆465
		★16.1.1 HttpMessageConverter和JSON消息转换器★467
		★16.1.2 一对一转换器（Converter）★471
			§表16-1 Spring Core项目的部分转换器§471
		★16.1.3 数组和集合转换器（GenericConverter）★474
		★16.1.4 使用格式化器（Formatter）★479
	☆16.2 为控制器添加通知☆482
	☆16.3 处理异常☆486
※第17章 Redis概述※496		
	☆17.1 Redis在Java Web中的应用☆497	
		★17.1.1 缓存★497
		★17.1.2 高速读写场合★498
	☆17.2 Redis基本安装和使用☆499
		★17.2.1 在Windows下安装Redis★500
		★17.2.2 在Linux下安装Redis★501
	☆17.3 Redis的Java API☆502
		★17.3.1 在Java程序中使用Redis★503
		★17.3.2 在Spring中使用Redis★504
	☆17.4 简介Redis的6种数据类型☆510
	☆17.5 Redis和数据库的异同☆511
※第18章 Redis数据结构常用命令※512，看到528
	☆18.1 Redis数据结构——字符串☆513
		§表18-2 Redis支持的简单运算516§
	☆18.2 Redis数据结构——哈希☆518
		§表18-4 Redis hash结构命令519§
	☆18.3 Redis数据结构——链表（linked-list）☆522
		§表18-5 Redis 关于链表的命令524§
		§表18-6 链表的阻塞命令525§
※第19章 Redis的一些常用技术※541，看到546
	§表19-1 Redis事务命令§542
	☆19.1 Redis的基础事务☆542
	☆19.2 探索Redis事务回滚☆544
	☆19.3 使用watch命令监控事务☆545
※附录A 数据库表模型※649